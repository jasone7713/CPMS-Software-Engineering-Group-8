@using Microsoft.Data.SqlClient
@using System.Data
@model IEnumerable<CPMS.Models.Paper>

@{
    ViewData["Title"] = "WeightedAverage";
}

<h1>Weighted Average Report</h1>

<table>
    <thead>
        <tr>
            <th>Paper ID</th>
            <th>Appropriateness of Topic</th>
            <th>Timeliness of Topic</th>
            <th>Supportive Evidence</th>
            <th>Technical Quality</th>
            <th>Scope of Coverage</th>
            <th>Citation of Previous Work</th>
            <th>Originality</th>
            <th>Organization of Paper</th>
            <th>Clarity of Main Message</th>
            <th>Mechanics</th>
            <th>Suitability for Presentation</th>
            <th>Potential Interest In Topic</th>
            <th>Overall Rating</th>
            <th>Filename</th>
            <th>Weighted Score</th>
        </tr>
    </thead>
    <tbody>
    
    @foreach (var item in Model) {
            //display only records marked as active
            if (item.Active == true)
            {
                //each active paper's ID
                var PaperID = item.PaperID;

                <tr>
                    <td>@PaperID</td>

                    @* Read data from server to display average scores on a per-paper basis *@
                    @using(SqlConnection conn = new SqlConnection("Server=(localdb)\\mssqllocaldb;Database=CPMS.Data;Trusted_Connection=True;MultipleActiveResultSets=true"))
                    {
                        SqlCommand command = new SqlCommand($"SELECT ROUND(AVG(CAST(AppropriatenessOfTopic AS FLOAT)), 2), ROUND(AVG(CAST(TimelinessOfTopic AS FLOAT)), 2), ROUND(AVG(CAST(SupportiveEvidence AS FLOAT)), 2), ROUND(AVG(CAST(TechnicalQuality AS FLOAT)), 2), ROUND(AVG(CAST(ScopeOfCoverage AS FLOAT)), 2), ROUND(AVG(CAST(CitationOfPreviousWork AS FLOAT)), 2), ROUND(AVG(CAST(Originality AS FLOAT)), 2), ROUND(AVG(CAST(OrganizationOfPaper AS FLOAT)), 2), ROUND(AVG(CAST(ClarityOfMainMessage AS FLOAT)), 2), ROUND(AVG(CAST(Mechanics AS FLOAT)), 2), ROUND(AVG(CAST(StabilityForPresentation AS FLOAT)), 2), ROUND(AVG(CAST(PotentialInterestInTopic AS FLOAT)), 2), ROUND(AVG(CAST(OverallRating AS FLOAT)), 2) FROM Review WHERE PaperID = '{PaperID}';", conn);

                        conn.Open();

                        using(SqlDataReader reader = command.ExecuteReader())
                        {
                            reader.Read();

                            //this is the number of columns that are expected in our table
                            int NumFields = 13;

                            double sum = 0;

                            //iterating through SQL data reader result
                            for(int i = 0; i < NumFields; i++)
                            {
                                //try printing column value
                                try
                                {
                                    <td>@reader[i]</td>

                                    sum += Convert.ToDouble(@reader[i]);
                                }  
                                //if an error occurs just print an empty column
                                catch
                                {
                                    <td></td>
                                }

                            }
    
                            //print filename as column
                            <td>@item.Filename</td>

                            //weighted average
                            <td>@(sum / NumFields)</td>
                        }
                    }
                </tr>
            }
    }

        </tbody>
    </table>

